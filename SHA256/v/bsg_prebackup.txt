//test pre processor for sha256
// was hooked up directly to fsb to test functioning
// Notes - change message input back to 256 bits, change o/p from data_o tore_proc_o  , change padding constant(448)
//
//
module bsg_prebackup#(parameter ring_width_p="inv"           ,parameter id_p="inv") 		//remove brackets when done test
        (input  [ring_width_p-1:0] data_i
        ,input          clk_i
        ,input          v_i
        ,input          en_i
        ,input          reset_i
        ,input          yumi_i
        ,output logic         ready_o
        ,output logic        v_o
        ,output [ring_width_p-1:0]  data_o
       // ,output logic   [511:0] pre_proc_o
        );

        typedef enum [1:0] {eWait, eBusy, eDone} state_e;
        state_e state_n, state_r;
        reg [511:0] pre_proc_o;
        always_ff @(posedge clk_i) begin
                state_r <= reset_i ? eWait : state_n;           //one change
        end
        logic [63:0] data_o;
        logic [511:0] pre_proc_r,  pre_proc_shift;
        assign pre_proc_shift = pre_proc_r << 1;
        always_comb begin
                 unique case(state_r)
                        eWait: begin                                                                                                                    
                                v_o = 1'b0;
                                ready_o = 1'b1;
                                if(v_i) begin
                                        state_n = eBusy;
                                        pre_proc_r = {data_i[64:0], 1'b1, 448'b0};
                                end else begin
                                        state_n = eWait;
                                end
                        end

                        eBusy:
                                begin
                                ready_o = 1'b0;
                                v_o = 1'b0;
                                if (pre_proc_r[511] == 0)
                                begin
                                        pre_proc_r = pre_proc_shift;
                                        state_n = eBusy;
                                end
     else
                                begin
                                        state_n = eDone;
                                        pre_proc_o = pre_proc_r;
                                end
                        end

                        eDone: 
				begin
                       		ready_o = 1'b0;
                       		v_o = 1'b1;
                      		data_o = 63'b0;
   				if (yumi_i) 
					begin
                                        state_n = eWait;
                               	        end
                       		 end

                        default: begin
                                state_n = eWait;
                        end

                endcase
        end

endmodule


                                                                                                      
