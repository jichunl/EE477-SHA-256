// auto-generated by bsg_ascii_to_rom.py from /home/jichunli/module2/ee477-designs/toplevels/bsg_guts_incr_gcd_cpu/testing/v/trace_master_1.tr; do not modify
module bsg_trace_master_1_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // #######################################################################################################
                                 // #
                                 // # format:   <4 bit op> <fsb packet>
                                 // #   op = 0000: wait one cycle
                                 // #   op = 0001: send
                                 // #   op = 0010: receive & check
                                 // #   op = 0011: done; disable but do not stop
                                 // #   op = 0100: finish; stop simulation
                                 // #   op = 0101: wait for cycle ctr to reach 0
                                 // #   op = 0110: set cycle ctr
                                 // #
                                 // # fsb packet (data)
                                 // # 1 bit    75 bits
                                 // #   0       data
                                 // #
                                 // # fsb packet (control)
                                 // # 1 bit    7 bits    4 bits   64 bits
                                 // #   1      opcode    srcid    data
                                 // #
                                 // # opcodes
                                 // #   1: 0000_001 = disable
                                 // #   2: 0000_010 = enable
                                 // #   5: 0000_101 = assert reset
                                 // #   6: 0000_110 = deassert reset
                                 // #
                                 // #send:  s  rst=0    src   data
         0: data_o = width_p ' (80'b0001____1__0000110__0001__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000); // 0x18610000000000000000
                                 // #send:  s  en=1     src   data
         1: data_o = width_p ' (80'b0001____1__0000010__0001__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000); // 0x18210000000000000000
                                 // ## TODO - Add Test Cases Here!
         2: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_10000000_00000000_00000000_10000000_00000000); // 0x10010000008000008000
         3: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_10000000); // 0x20000000000000000080
         4: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_11111010_00000000_00000000_00000000_01100100); // 0x1001000000FA00000064
         5: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00110010); // 0x20000000000000000032
         6: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_00110001_00000000_00000000_00000000_00111000); // 0x10010000003100000038
         7: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000111); // 0x20000000000000000007
         8: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_01100100_00000000_00000000_00000100_00000001); // 0x10010000006400000401
         9: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00011001); // 0x20000000000000000019
        10: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_01000100_00000000_00000000_00000100_00000100); // 0x10010000004400000404
        11: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000100); // 0x20000000000000000004
        12: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000000_00000111_00000000_00000000_00000000_10000000); // 0x10010000000700000080
        13: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001); // 0x20000000000000000001
        14: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00011111_00101011_00000000_00000000_00000011_00010110); // 0x100100001F2B00000316
        15: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_01001111); // 0x2000000000000000004F
        16: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000011_00010110_00000000_00000000_00011111_00101011); // 0x10010000031600001F2B
        17: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_01001111); // 0x2000000000000000004F
        18: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00100000_01010010_00000000_00000000_00010010_01011110); // 0x1001000020520000125E
        19: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010); // 0x20000000000000000002
        20: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00100010_10001101_00000000_00000000_00011000_10111000); // 0x10010000228D000018B8
        21: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000001); // 0x20000000000000000001
        22: data_o = width_p ' (80'b0001____0__0000000__0001__00000000_00000000_00000011_00000010_00000000_00000000_00001000_11001000); // 0x100100000302000008C8
        23: data_o = width_p ' (80'b0010____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000010); // 0x20000000000000000002
                                 // #done:  indicated done, when all trace-replays are done, the
                                 // #       simulation will finish.
        24: data_o = width_p ' (80'b0011____1__0000000__0001__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000); // 0x38010000000000000000
   default: data_o = 'X;
endcase
endmodule
